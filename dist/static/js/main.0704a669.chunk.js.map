{"version":3,"sources":["components/LoadingComp.tsx","components/P404Comp.tsx","configs/router.ts","components/RouterComp.tsx","App.tsx","index.tsx","helpers/http.ts","configs/server.ts","stores/config.ts","stores/demo/demoStore.ts","stores/index.tsx"],"names":["LoadingComp","className","P404Comp","status","title","subTitle","extra","to","type","routes","path","component","lazy","SwitchMainRouter","map","route","i","RouterComp","fallback","RouteWithSubRoutes","render","props","SwitchRouter","length","App","ReactDOM","document","getElementById","http","axios","create","baseURL","stores","demoStore","getDemoinfo","id","get","data","setDemoInfo","name","post","storeContext","React","createContext","StoreProvider","children","Stores","k","configStores","useLocalStore","Provider","value","useStores","useContext","Error"],"mappings":"gMAQeA,G,MALK,kBAClB,qBAAKC,UAAU,cAAf,SACE,cAAC,IAAD,Q,kBCWWC,EAbE,kBACf,cAAC,IAAD,CACEC,OAAO,MACPC,MAAM,MACNC,SAAS,yDACTC,MACE,cAAC,IAAD,CAAMC,GAAG,IAAT,SACE,cAAC,IAAD,CAAQC,KAAK,UAAb,2CCRKC,EAAyB,CACpC,CACEC,KAAM,IACNC,UAAWC,gBAAK,kBAAM,mCCGpBC,EAAmB,WACvB,OACE,eAAC,IAAD,WAJsBJ,EAAOK,KAAI,SAACC,EAAOC,GAAR,OAAc,cAAC,EAAD,eAAgCD,GAAPC,MAMtE,cAAC,IAAD,UACE,cAAC,EAAD,UAeOC,EATI,WACjB,OACE,cAAC,IAAD,UACE,cAAC,WAAD,CAAUC,SAAU,cAAC,EAAD,IAApB,SACE,cAAC,EAAD,SAOFC,EAAqB,SAACJ,GAC1B,OACGA,EAAMJ,WACL,cAAC,IAAD,CAAOD,KAAMK,EAAML,KAAMU,OAAQ,SAAAC,GAAK,OAAI,cAACN,EAAMJ,UAAP,2BAAqBU,GAArB,IAA4BZ,OAAQM,EAAMN,cAChF,cAAC,EAAD,CAAcA,OAAQM,EAAMN,UAIzBa,EAAe,SAAC,GAAyC,IAAxCb,EAAuC,EAAvCA,OAC5B,OACE,cAAC,IAAD,UACGA,GAAUA,EAAOc,OAAS,GAAKd,EAAOK,KAAI,SAACC,EAAOC,GAAR,OAAc,cAAC,EAAD,eAAgCD,GAAPC,SCjCzEQ,EALH,kBACV,mCACE,cAAC,EAAD,O,QCAJC,IAASL,OACP,cAAC,IAAD,UACE,cAAC,EAAD,MAEFM,SAASC,eAAe,U,yKCDXC,E,OALFC,EAAMC,OAAO,CACxBC,QAAQ,UAAD,OCJiB,YDIjB,YCHiB,UCOXC,EAN4B,CACzCC,UCDuB,WACvB,MAAO,CACCC,YADD,YACkC,OAAD,qHAAnBC,EAAmB,EAAnBA,GAAmB,SACfP,EAAKQ,IAAL,uBAAyBD,IADV,uBAC7BE,EAD6B,EAC7BA,KAD6B,kBAE7BA,GAF6B,8CAIhCC,YALD,YAKsD,OAAD,uHAAvCH,EAAuC,EAAvCA,GAAII,EAAmC,EAAnCA,KAAmC,SACnCX,EAAKY,KAAK,cAAe,CAC5CL,KACAI,SAHsD,uBACjDF,EADiD,EACjDA,KADiD,kBAKjDA,GALiD,iDCJxDI,EAAeC,IAAMC,cAAmC,MAIjDC,EAAgB,SAAC,GAAwC,IAAvCC,EAAsC,EAAtCA,SACvBC,EAA6B,GACnC,IAAK,IAAMC,KAAKC,EACdF,EAAOC,GAAKE,YAAcD,EAAaD,IAEzC,OAAO,cAACN,EAAaS,SAAd,CAAuBC,MAAOL,EAA9B,SAAuCD,KAGnCO,EAAY,WACvB,IAAMpB,EAASqB,qBAAWZ,GAC1B,IAAKT,EAEH,MAAM,IAAIsB,MAAM,iDAElB,OAAOtB,I","file":"static/js/main.0704a669.chunk.js","sourcesContent":["import {Spin} from 'antd'\nimport React from 'react'\nimport './LoadingCompStyle.scss'\nconst LoadingComp = () => (\n  <div className=\"loadingComp\">\n    <Spin />\n  </div>\n)\nexport default LoadingComp\n","import React from 'react'\nimport {Result, Button} from 'antd'\nimport {Link} from 'react-router-dom'\nconst P404Comp = () => (\n  <Result\n    status=\"404\"\n    title=\"404\"\n    subTitle=\"找不到相应的页面！\"\n    extra={\n      <Link to=\"/\">\n        <Button type=\"primary\">返回首页</Button>\n      </Link>\n    }\n  />\n)\n\nexport default P404Comp\n","import {lazy} from 'react'\n\nexport const routes: Array<Troutes> = [\n  {\n    path: '/',\n    component: lazy(() => import('src/pages/Main')),\n  },\n]\n\nexport type Troutes = {\n  path: string\n  component?: any\n  routes?: Array<Troutes>\n  exact?: boolean\n}\n","import React, {Suspense, useEffect} from 'react'\nimport {Route, BrowserRouter as Router, Switch, useLocation} from 'react-router-dom'\nimport LoadingComp from 'src/components/LoadingComp'\nimport P404Comp from 'src/components/P404Comp'\nimport {routes, Troutes} from 'src/configs/router'\n\nconst RoutersComp = () => routes.map((route, i) => <RouteWithSubRoutes key={i} {...route} />)\n\nconst SwitchMainRouter = () => {\n  return (\n    <Switch>\n      {RoutersComp()}\n      <Route>\n        <P404Comp />\n      </Route>\n    </Switch>\n  )\n}\n\nconst RouterComp = () => {\n  return (\n    <Router>\n      <Suspense fallback={<LoadingComp />}>\n        <SwitchMainRouter />\n      </Suspense>\n    </Router>\n  )\n}\nexport default RouterComp\n\nconst RouteWithSubRoutes = (route: Troutes) => {\n  return (\n    (route.component && (\n      <Route path={route.path} render={props => <route.component {...props} routes={route.routes} />} />\n    )) || <SwitchRouter routes={route.routes} />\n  )\n}\n\nexport const SwitchRouter = ({routes}: {routes?: Array<Troutes>}) => {\n  return (\n    <Switch>\n      {routes && routes.length > 0 && routes.map((route, i) => <RouteWithSubRoutes key={i} {...route} />)}\n    </Switch>\n  )\n}\n","import React from 'react'\nimport RouterComp from 'src/components/RouterComp'\n\nconst App = () => (\n  <>\n    <RouterComp />\n  </>\n)\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport {StoreProvider} from 'src/stores'\n\nReactDOM.render(\n  <StoreProvider>\n    <App />\n  </StoreProvider>,\n  document.getElementById('root'),\n)\n","import axios from 'axios'\nimport {serverHost, serverPort} from 'src/configs/server'\n\nconst http = axios.create({\n  baseURL: `http://${serverHost}:${serverPort}`,\n  // withCredentials: true,\n})\n\nexport default http\n","export const serverHost = 'localhost'\nexport const serverPort = '1234'\n","import {demoStore, TDemoStore} from 'src/stores/demo/demoStore'\n\nconst stores: {[key: string]: () => any} = {\n  demoStore,\n}\nexport type TconfigStore = {\n  demoStore: TDemoStore\n}\nexport default stores\n","import http from 'src/helpers/http'\n\nexport const demoStore = () => {\n  return {\n    async getDemoinfo({id}: {id: number}) {\n      const {data} = await http.get(`/demo/search/${id}`)\n      return data\n    },\n    async setDemoInfo({id, name}: {id: number; name: string}) {\n      const {data} = await http.post('/demo/alert', {\n        id,\n        name,\n      })\n      return data\n    },\n  }\n}\nexport type TDemoStore = ReturnType<typeof demoStore>\n","import React, {useContext} from 'react'\nimport {useLocalStore} from 'mobx-react-lite'\nimport configStores, {TconfigStore} from 'src/stores/config'\n\nconst storeContext = React.createContext<TconfigStore | null>(null)\ntype storeProviderPropsType = {\n  children: React.ReactNode\n}\nexport const StoreProvider = ({children}: storeProviderPropsType) => {\n  const Stores: TconfigStore | any = {}\n  for (const k in configStores) {\n    Stores[k] = useLocalStore(configStores[k]) // eslint-disable-line\n  }\n  return <storeContext.Provider value={Stores}>{children}</storeContext.Provider>\n}\n\nexport const useStores = () => {\n  const stores = useContext(storeContext)\n  if (!stores) {\n    // this is especially useful in TypeScript so you don't need to be checking for null all the time\n    throw new Error('useStore must be used within a StoreProvider.')\n  }\n  return stores\n}\n"],"sourceRoot":""}